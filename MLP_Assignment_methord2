import numpy as np
import torch.nn as nn
import torch
import torch.nn.functional as F
from torchvision import datasets, transforms
from tqdm.notebook import tqdm
mnist_train = datasets.MNIST(root="./datasets", train=True, transform=transforms.ToTensor(), download=True)
mnist_test = datasets.MNIST(root="./datasets", train=False, transform=transforms.ToTensor(), download=True)
train_loader = torch.utils.data.DataLoader(mnist_train, batch_size=100, shuffle=True)
test_loader = torch.utils.data.DataLoader(mnist_test, batch_size=100, shuffle=False) 
class MNIST_Logistic_Regression(nn.Module):
    def __init__(self):
        super().__init__()
        self.lin1 = nn.Linear(784,5)
        self.lin2=nn.Linear(5,10)
    def forward(self, x):
        x=self.lin1(x)
        x=F.relu(x)
        return(self.lin2(x))
model=MNIST_Logistic_Regression()
croos_entropy=nn.CrossEntropyLoss()
optimizer = torch.optim.SGD(model.parameters(), lr=0.1)

for t in range(4):
    for images, labels in tqdm(train_loader):
        x = images.view(-1, 28*28)
        optimizer.zero_grad()
        y=model(x)
        loss=croos_entropy(y,labels)
        loss.backward()
        optimizer.step()
correct = 0
total = len(mnist_test)
with torch.no_grad():
    for images, labels in tqdm(test_loader):
        x = images.view(-1, 28*28)
        y=model(x)
        predictions = torch.argmax(y, dim=1)
        correct += torch.sum((predictions == labels).float())

print(correct/total)
#accuracy=0.8901
